"""Functional Battleship with Functions."""

__author__ = "730576169"

import random

BLUE_BOX: str = "\U0001F7E6"
RED_BOX: str = "\U0001F7E5"
WHITE_BOX: str = "\U00002B1C"

def input_guess(grid_size: int, side_choice: str) -> int:
    assert side_choice == "row" or side_choice == "column"
    inbound: bool = True
    while inbound:
        side_guess: str = input(f"Guess a {side_choice}: ")
        side_number: int = int(side_guess)
        if side_number < 1:
            print(f"The grid is only {grid_size} by {grid_size}. Try again: ")
        elif side_number > grid_size:
            print(f"The grid is only {grid_size} by {grid_size}. Try again: ")
        else:
            inbound = False
    return side_number

def print_grid(grid_size: int, row_guess: int, column_guess: int, user_correct: bool) -> None:
    # Starting a row count and running a while loop until it equals grid size so it creates the proper number of rows for the grid
    row_count: int = 1 
    while row_count <= grid_size:
    # Creating a storage str to concatenate to later and column count to run a while loop for each box that needs to be added to the row
        row_str: str = str()
        column_count = 1
    # If this is the row they guessed it goes further on, else it just creates a string of blue boxes equal to the grid size
        if row_count == row_guess:
        # Runs a while loop for each column checking if it is the one they guessed. If it is they add the box color depending of if it was right or wrong, otherwise it adds a blue box
            while column_count <= grid_size:
                if column_count == column_guess:
                    if user_correct == True:
                        row_str += str(RED_BOX)
                    else:
                        row_str += str(WHITE_BOX) 
                else:
                    row_str += str(BLUE_BOX)
                column_count += 1
        else: 
            while column_count <= grid_size:
                row_str += str(BLUE_BOX)
                column_count += 1
    # Prints the row output and adds 1 to start the while loop again until it does repeats equal to the number of rows and matches the grid size
        print(row_str)
        row_count += 1


def correct_guess(secret_row: int, secret_column: int, row_guess: int, column_guess: int) -> bool:
    if secret_row == row_guess and secret_column == column_guess:
        return True
    else:
        return False

def main(grid_size: int, secret_row: int, secret_column: int) -> None:
    turn_number: int = 5
    turn_count: int = 1
    hit_correct: bool = True
    while turn_count <= turn_number and hit_correct:
        print(f"=== Turn {turn_count}/{turn_number} ===")
        row_guess: int = input_guess(grid_size, "row")
        column_guess: int = input_guess(grid_size, "column")
        result: bool = correct_guess(secret_row, secret_column, row_guess, column_guess)
        if result == True:
            print_grid(grid_size, row_guess, column_guess, True)
            print(f"You won in {turn_count}/{turn_number} turns!")
            hit_correct = False
        else:
            print_grid(grid_size, row_guess, column_guess, False)
            print("Miss!")
            turn_count += 1

if __name__ == "__main__":
    grid_size: int = random.randint(3, 5)
    main(grid_size, random.randint(1, grid_size), random.randint(1, grid_size))